import os
import asyncio
import aiohttp
import json
from datetime import datetime
from pathlib import Path
from dotenv import load_dotenv
from aiogram import Bot
from aiogram.utils.markdown import hcode, hbold

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
env_path = Path(__file__).resolve().parent.parent / '.env'
load_dotenv(dotenv_path=env_path)

TELEGRAM_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('GROUP_ID')
API_URL = os.getenv('API_NIMS_HIGHTEMP')
API_TOKEN = os.getenv('TOKEN_NIMS_HIGHTEMP')

SENT_ALARMS_FILE = "sent_alarms.json" # —Ñ–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–≤–∞—Ä–∏–π

bot = Bot(token=TELEGRAM_TOKEN)

def load_sent_alarms():
    """–§—É–Ω–∫–∏—è –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–≤–∞—Ä–∏–π –∏–∑ JSON-—Ñ–∞–π–ª–∞"""
    try:
        with open(SENT_ALARMS_FILE, 'r') as f:
            return set(json.load(f))
    except (FileNotFoundError, json.JSONDecodeError):
        return set()

def save_sent_alarms(sent_alarms):
    """–§—É–Ω–∫–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–≤–∞—Ä–∏–π –≤ JSON-—Ñ–∞–π–ª"""
    with open(SENT_ALARMS_FILE, 'w') as f:
        json.dump(list(sent_alarms), f)

async def fetch_alarms():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≤–∞—Ä–∏–π —Å API –≤—ã–∑–æ–≤–∞"""
    async with aiohttp.ClientSession() as session:
        headers = {"Authorization": f"Token {API_TOKEN}"}
        async with session.get(API_URL, headers=headers) as response:
            if response.status == 200:
                data = await response.json()
                return data
            else:
                print(f"–û—à–∏–±–∫–∞ API: {response.status}")
                return []

async def send_alarm_message(alarm):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∞–≤–∞—Ä–∏–∏"""
    try: # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        start_time = datetime.fromisoformat(alarm['alarmraisedtime'].replace('Z', '+00:00'))
        formatted_time = start_time.strftime('%d %B %Y, %H:%M:%S')
    except (ValueError, KeyError):
        formatted_time = alarm.get('alarmraisedtime', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

    message = (
        f"\n"
        f"‚ö†Ô∏è {hbold('Link')}: {hcode(alarm['me'])}\n"
        f"üìõ {hbold('Alarm')}: {hcode(alarm['codename'])}\n"
        f"üí¨ {hbold('Comment')}: {hcode(alarm['comment'])}\n"
        f"‚è∞ {hbold('Start Time')}: {hcode(formatted_time)}\n"
        f"üîó {hbold('Sites Behind')}: {hcode(alarm['sitesbehind'])}\n"
    )

    await bot.send_message(
        chat_id=TELEGRAM_CHAT_ID,
        text=message,
        parse_mode='HTML'
    )

async def main():
    """Main Function: –ø–æ–ª—É—á–∞–µ—Ç –∞–≤–∞—Ä–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö"""
    while True:
        sent_alarms = load_sent_alarms() # –∑–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ä–∞–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–≤–∞—Ä–∏–π
        
        alarms = await fetch_alarms() # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –∞–≤–∞—Ä–∏–∏
        
        if not alarms:
            print("–ù–µ—Ç –Ω–æ–≤—ã—Ö –∞–≤–∞—Ä–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
            save_sent_alarms(set())  # –ß–∏—Å—Ç–∫–∞ JSON, –µ—Å–ª–∏ –Ω–µ—Ç –∞–≤–∞—Ä–∏–π
        else:
            current_alarm_ids = {alarm['me'] for alarm in alarms} # –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ª–∏–Ω–∫–æ–≤ —Ç–µ–∫—É—â–∏—Ö –∞–≤–∞—Ä–∏–π –∏–∑ API
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∞–≤–∞—Ä–∏–∏ –Ω–∞ –ª–∏–Ω–∫–∞—Ö (–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ä–∞–Ω–µ–µ)
            new_alarms = [alarm for alarm in alarms if alarm['me'] not in sent_alarms] # was alarmcode now me
            
            if not new_alarms:
                print("–í—Å–µ –∞–≤–∞—Ä–∏–∏ —É–∂–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
            else:
                print(f"–ù–∞–π–¥–µ–Ω–æ {len(new_alarms)} –Ω–æ–≤—ã—Ö –∞–≤–∞—Ä–∏–π. –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram...")
                for i, alarm in enumerate(new_alarms, 1):
                    try:
                        await send_alarm_message(alarm)
                        sent_alarms.add(alarm['alarmcode'])  # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∫ –≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ
                        print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {i}/{len(new_alarms)}")
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {i}-–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    await asyncio.sleep(5.0)

            # –û–±–Ω–æ–≤–ª—è–µ–º JSON, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ª–∏–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—ë –µ—â—ë –≤ API –∏–ª–∏ —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
            updated_sent_alarms = sent_alarms & current_alarm_ids
            save_sent_alarms(updated_sent_alarms | {alarm['me'] for alarm in new_alarms}) # was alarmcode now me

        # –ñ–¥—ë–º 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ü–∏–∫–ª–æ–º
        print("–û–∂–∏–¥–∞–Ω–∏–µ 5 –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")
        await asyncio.sleep(300)

if __name__ == "__main__":
    asyncio.run(main())